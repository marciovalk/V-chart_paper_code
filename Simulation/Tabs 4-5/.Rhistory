}
}
#colnames(m_res_1)<-c("n1","n","ar_coefs","ACF_mu","ACF_sd","Drift_mu","Drift_sd")
#round(m_res_1,3)
colnames(m_res_5)<-c("n1","n","ar_coefs","ACF_mu","ACF_sd","Drift_mu","Drift_sd")
round(m_res_5,3)
colnames(m_res_1)<-c("n1","n","ar_coefs","ACF_mu","ACF_sd","Drift_mu","Drift_sd")
round(m_res_1,3)
ar_h0=0.3
#ar_coefs=c(-0.4,-0.3,-0.1,0.2,0.3,0.4,0.5,0.7)
ar_coefs=c(0.3)
Res_A_1 <- array(dim=c(length(n1v),length(nv),length(ar_coefs)))
Res_A_5 <- Res_A_1;
Res_sd_A_1 <- Res_A_1; Res_sd_A_5 <- Res_A_1;
Res_A_d1 <- Res_A_1; Res_A_d5 <- Res_A_1;
Res_sd_A_d1 <- Res_A_1; Res_sd_A_d5 <- Res_A_1;
at1<-Sys.time()
n1_count=0
for(n1 in n1v){
n1_count<-n1_count+1
n_count<-0
print(paste("n1_",n1))
for(n in nv){
LagMax=n
print(paste("n_",n))
n_count<-n_count+1
prop_rejct_1=matrix(0,nrow=REP,ncol=length(ar_coefs))
prop_rejct_5=matrix(0,nrow=REP,ncol=length(ar_coefs))
prop_rejct_d1=matrix(0,nrow=REP,ncol=length(ar_coefs))
prop_rejct_d5=matrix(0,nrow=REP,ncol=length(ar_coefs))
for(rep in 1:REP){
print(paste("REP_",rep))
for(s in 1:length(ar_coefs)){
x=matrix(0,ncol=n,nrow=n1)
y=x
xx=matrix(0,ncol=n,nrow=Re);yy=xx
acf_0=matrix(0,nrow=n1,ncol=LagMax)
acf_1=matrix(0,nrow=Re,ncol=LagMax)
for(r in 1:n1){
x[r,]<-arima.sim(n=n, model = list(ar = ar_h0))
y[r,]<-x[r,]-ma(x[r,])
acf_0[r,]=c(acf((y[r,]),lag.max=100,plot=FALSE)$acf[-1],rnorm(n-100))
}
x_h0<-sweep(x, 2, colMeans(x))#retira a serie media dos dados
for(r in 1:Re){
xx[r,]<-arima.sim(n=n, model = list(ar = ar_coefs[s]))
yy[r,]<-xx[r,]-ma(xx[r,])
acf_1[r,]=c(acf((yy[r,]),lag.max=100,plot=FALSE)$acf[-1],rnorm(n-100))
}
x_h1<-sweep(xx, 2, colMeans(x))#retira a serie media(h0) dos dados (h1)
d_a<-as.matrix(((dist(rbind(acf_0,acf_1)))^2))
d_d<-as.matrix(dist(rbind(x_h0,x_h1))^2)
###########################
U0=c()
U0d=c()
for(i in 1:n1){
group_id=rep(0,n1)
group_id[i]=1
U0[i]=bn(group_id, md=d_a[1:n1,1:n1])
U0d[i]=bn(group_id, md=d_d[1:n1,1:n1])
}
sdU0=sqrt(var_bn(c(1,(n1-1)),md=d_a[1:n1,1:n1]))
sdU0d=sqrt(var_bn(c(1,(n1-1)),md=d_d[1:n1,1:n1]))
U1=c()
U1d=c()
for(i in 1:Re){
group_id=c(rep(0,(n1-1)),1)
aux1=sample(n1,(n1-1))
U1[i]=bn(group_id, md=d_a[c(aux1,(i+n1)),c(aux1,(i+n1))])
U1d[i]=bn(group_id, md=d_d[c(1:(n1-1),(i+n1)),c(1:(n1-1),(i+n1))])
}
####
###
prop_rejct_1[rep,s]=sum((U1/((n1/(n1-1))*sdU0))>qnorm(0.99))
prop_rejct_5[rep,s]=sum((U1/((n1/(n1-1))*sdU0))>qnorm(0.95))
print(sum((U1/sd((n1/(n1-1))*U0))>qnorm(0.95)))
print(sum((U1/sd((n1/(n1-1))*U0))>qnorm(0.99)))
prop_rejct_d1[rep,s]=sum((U1d/sd((n1/(n1-1))*U0d))>qnorm(0.99))
prop_rejct_d5[rep,s]=sum((U1d/sd((n1/(n1-1))*U0d))>qnorm(0.95))
}
}
#Res_A_1[n1_count,n_count,] <- ifelse((colMeans(prop_rejct_1)/Re)==0,NA,1/(colMeans(prop_rejct_1)/Re))
#Res_A_5[n1_count,n_count,] <- ifelse((colMeans(prop_rejct_5)/Re)==0,NA,1/(colMeans(prop_rejct_5)/Re))
Res_A_1[n1_count,n_count,] <- ifelse((colMeans(prop_rejct_d1)/Re)==0,NA,1/(apply(prop_rejct_1,2,median)/Re))
Res_A_5[n1_count,n_count,] <- ifelse((colMeans(prop_rejct_d5)/Re)==0,NA,1/(apply(prop_rejct_5,2,median)/Re))
Res_sd_A_1[n1_count,n_count,] <- apply(prop_rejct_1,2,sd)/Re
Res_sd_A_5[n1_count,n_count,] <- apply(prop_rejct_5,2,sd)/Re
Res_A_d1[n1_count,n_count,] <- ifelse((colMeans(prop_rejct_d1)/Re)==0,NA,1/(colMeans(prop_rejct_d1)/Re))
Res_A_d5[n1_count,n_count,] <- ifelse((colMeans(prop_rejct_d5)/Re)==0,NA,1/(colMeans(prop_rejct_d5)/Re))
Res_sd_A_d1[n1_count,n_count,] <- apply(prop_rejct_d1,2,sd)/Re
Res_sd_A_d5[n1_count,n_count,] <- apply(prop_rejct_d5,2,sd)/Re
}
}
tempo1<- Sys.time()-at1
#Analise
m_res_1<- matrix(0,ncol=7,nrow=length(n1v)*length(nv)*length(ar_coefs))
m_res_5<-m_res_1
icount=0
ic=0
for(i in n1v){
ic=ic+1
jc=0
for(j in nv){
jc=jc+1
kc=0
for(k in ar_coefs){
kc=kc+1
print(kc)
icount=icount+1
m_res_1[icount,] <- c(i,j,k,Res_A_1[ic,jc,kc],Res_sd_A_1[ic,jc,kc],Res_A_d1[ic,jc,kc],Res_sd_A_d1[ic,jc,kc])
m_res_5[icount,] <- c(i,j,k,Res_A_5[ic,jc,kc],Res_sd_A_5[ic,jc,kc],Res_A_d5[ic,jc,kc],Res_sd_A_d5[ic,jc,kc])
}
}
}
#colnames(m_res_1)<-c("n1","n","ar_coefs","ACF_mu","ACF_sd","Drift_mu","Drift_sd")
#round(m_res_1,3)
colnames(m_res_5)<-c("n1","n","ar_coefs","ACF_mu","ACF_sd","Drift_mu","Drift_sd")
round(m_res_5,3)
colnames(m_res_1)<-c("n1","n","ar_coefs","ACF_mu","ACF_sd","Drift_mu","Drift_sd")
round(m_res_1,3)
ar_h0=0.3
#ar_coefs=c(-0.4,-0.3,-0.1,0.2,0.3,0.4,0.5,0.7)
ar_coefs=c(0.2)
Res_A_1 <- array(dim=c(length(n1v),length(nv),length(ar_coefs)))
Res_A_5 <- Res_A_1;
Res_sd_A_1 <- Res_A_1; Res_sd_A_5 <- Res_A_1;
Res_A_d1 <- Res_A_1; Res_A_d5 <- Res_A_1;
Res_sd_A_d1 <- Res_A_1; Res_sd_A_d5 <- Res_A_1;
at1<-Sys.time()
n1_count=0
for(n1 in n1v){
n1_count<-n1_count+1
n_count<-0
print(paste("n1_",n1))
for(n in nv){
LagMax=n
print(paste("n_",n))
n_count<-n_count+1
prop_rejct_1=matrix(0,nrow=REP,ncol=length(ar_coefs))
prop_rejct_5=matrix(0,nrow=REP,ncol=length(ar_coefs))
prop_rejct_d1=matrix(0,nrow=REP,ncol=length(ar_coefs))
prop_rejct_d5=matrix(0,nrow=REP,ncol=length(ar_coefs))
for(rep in 1:REP){
print(paste("REP_",rep))
for(s in 1:length(ar_coefs)){
x=matrix(0,ncol=n,nrow=n1)
y=x
xx=matrix(0,ncol=n,nrow=Re);yy=xx
acf_0=matrix(0,nrow=n1,ncol=LagMax)
acf_1=matrix(0,nrow=Re,ncol=LagMax)
for(r in 1:n1){
x[r,]<-arima.sim(n=n, model = list(ar = ar_h0))
y[r,]<-x[r,]-ma(x[r,])
acf_0[r,]=c(acf((y[r,]),lag.max=100,plot=FALSE)$acf[-1],rnorm(n-100))
}
x_h0<-sweep(x, 2, colMeans(x))#retira a serie media dos dados
for(r in 1:Re){
xx[r,]<-arima.sim(n=n, model = list(ar = ar_coefs[s]))
yy[r,]<-xx[r,]-ma(xx[r,])
acf_1[r,]=c(acf((yy[r,]),lag.max=100,plot=FALSE)$acf[-1],rnorm(n-100))
}
x_h1<-sweep(xx, 2, colMeans(x))#retira a serie media(h0) dos dados (h1)
d_a<-as.matrix(((dist(rbind(acf_0,acf_1)))^2))
d_d<-as.matrix(dist(rbind(x_h0,x_h1))^2)
###########################
U0=c()
U0d=c()
for(i in 1:n1){
group_id=rep(0,n1)
group_id[i]=1
U0[i]=bn(group_id, md=d_a[1:n1,1:n1])
U0d[i]=bn(group_id, md=d_d[1:n1,1:n1])
}
sdU0=sqrt(var_bn(c(1,(n1-1)),md=d_a[1:n1,1:n1]))
sdU0d=sqrt(var_bn(c(1,(n1-1)),md=d_d[1:n1,1:n1]))
U1=c()
U1d=c()
for(i in 1:Re){
group_id=c(rep(0,(n1-1)),1)
aux1=sample(n1,(n1-1))
U1[i]=bn(group_id, md=d_a[c(aux1,(i+n1)),c(aux1,(i+n1))])
U1d[i]=bn(group_id, md=d_d[c(1:(n1-1),(i+n1)),c(1:(n1-1),(i+n1))])
}
####
###
prop_rejct_1[rep,s]=sum((U1/((n1/(n1-1))*sdU0))>qnorm(0.99))
prop_rejct_5[rep,s]=sum((U1/((n1/(n1-1))*sdU0))>qnorm(0.95))
print(sum((U1/sd((n1/(n1-1))*U0))>qnorm(0.95)))
print(sum((U1/sd((n1/(n1-1))*U0))>qnorm(0.99)))
prop_rejct_d1[rep,s]=sum((U1d/sd((n1/(n1-1))*U0d))>qnorm(0.99))
prop_rejct_d5[rep,s]=sum((U1d/sd((n1/(n1-1))*U0d))>qnorm(0.95))
}
}
#Res_A_1[n1_count,n_count,] <- ifelse((colMeans(prop_rejct_1)/Re)==0,NA,1/(colMeans(prop_rejct_1)/Re))
#Res_A_5[n1_count,n_count,] <- ifelse((colMeans(prop_rejct_5)/Re)==0,NA,1/(colMeans(prop_rejct_5)/Re))
Res_A_1[n1_count,n_count,] <- ifelse((colMeans(prop_rejct_d1)/Re)==0,NA,1/(apply(prop_rejct_1,2,median)/Re))
Res_A_5[n1_count,n_count,] <- ifelse((colMeans(prop_rejct_d5)/Re)==0,NA,1/(apply(prop_rejct_5,2,median)/Re))
Res_sd_A_1[n1_count,n_count,] <- apply(prop_rejct_1,2,sd)/Re
Res_sd_A_5[n1_count,n_count,] <- apply(prop_rejct_5,2,sd)/Re
Res_A_d1[n1_count,n_count,] <- ifelse((colMeans(prop_rejct_d1)/Re)==0,NA,1/(colMeans(prop_rejct_d1)/Re))
Res_A_d5[n1_count,n_count,] <- ifelse((colMeans(prop_rejct_d5)/Re)==0,NA,1/(colMeans(prop_rejct_d5)/Re))
Res_sd_A_d1[n1_count,n_count,] <- apply(prop_rejct_d1,2,sd)/Re
Res_sd_A_d5[n1_count,n_count,] <- apply(prop_rejct_d5,2,sd)/Re
}
}
tempo1<- Sys.time()-at1
#Analise
m_res_1<- matrix(0,ncol=7,nrow=length(n1v)*length(nv)*length(ar_coefs))
m_res_5<-m_res_1
icount=0
ic=0
for(i in n1v){
ic=ic+1
jc=0
for(j in nv){
jc=jc+1
kc=0
for(k in ar_coefs){
kc=kc+1
print(kc)
icount=icount+1
m_res_1[icount,] <- c(i,j,k,Res_A_1[ic,jc,kc],Res_sd_A_1[ic,jc,kc],Res_A_d1[ic,jc,kc],Res_sd_A_d1[ic,jc,kc])
m_res_5[icount,] <- c(i,j,k,Res_A_5[ic,jc,kc],Res_sd_A_5[ic,jc,kc],Res_A_d5[ic,jc,kc],Res_sd_A_d5[ic,jc,kc])
}
}
}
#colnames(m_res_1)<-c("n1","n","ar_coefs","ACF_mu","ACF_sd","Drift_mu","Drift_sd")
#round(m_res_1,3)
colnames(m_res_5)<-c("n1","n","ar_coefs","ACF_mu","ACF_sd","Drift_mu","Drift_sd")
round(m_res_5,3)
colnames(m_res_1)<-c("n1","n","ar_coefs","ACF_mu","ACF_sd","Drift_mu","Drift_sd")
round(m_res_1,3)
myPaths <- c("C:/Users/Marcio/R lib")
.libPaths(myPaths)  # add new path
install.packages("BiocManager")
BiocManager::install("pkimes/sigclust2")
suppressPackageStartupMessages(library("sigclust2"))
myPaths <- c("C:/Users/Marcio/R lib")
.libPaths(myPaths)  # add new path
n=500
phi=0.8
theta=0.2
x <-  c(arima.sim(model=list(ma=theta),n=n/2,sd=1),
arima.sim(model=list(ar=phi),n=n/2,sd=1))
plot.ts(x)
n=500
phi=0.8
theta=0.1
x <-  c(arima.sim(model=list(ma=theta),n=n/2,sd=1),
arima.sim(model=list(ar=phi),n=n/2,sd=1))
plot.ts(x)
n=500
phi=0.8
theta=0.1
I=10
x=matrix(0,ncol=n,nrow=I)
for(i in 1:I){
x[i,] <-  c(arima.sim(model=list(ma=theta),n=n/2,sd=1),
arima.sim(model=list(ar=phi),n=n/2,sd=1))
}
install.packages("forecast")
library(forecast)
x <-  c(arima.sim(model=list(ma=theta),n=n/2,sd=1),
arima.sim(model=list(ar=phi),n=n/2,sd=1))
i
1
X=matrix(0,ncol=n,nrow=I)
X[i,] <-auto.arima(x)
arm=auto.arima(x)
arm$coef
arm$arma
arm$model
arm$model$phi
n=500
phi=0.8
theta=0.1
I=10
X=matrix(0,ncol=n,nrow=I)
l.phi=c()
l.theta=c()
for(i in 1:I){
x <-  c(arima.sim(model=list(ma=theta),n=n/2,sd=1),
arima.sim(model=list(ar=phi),n=n/2,sd=1))
X[i,] <-x
arm=auto.arima(x)
print(arm$coef)
l.phi[i]=length(arm$model$phi)
l.theta[i]=length(arm$model$theta)
}
arm=auto.arima(X[5,])
arm$model$a
arm$coef
arm=auto.arima(X[4,])
print(arm$coef)
arm$model$a
arm$model$Z
arm$coef
arm$coef$ar1
arm$coef@ar1
names(arm$coef)
n=500
phi=0.8
theta=0.1
I=10
X=matrix(0,ncol=n,nrow=I)
l.phi=c()
l.theta=c()
for(i in 1:I){
x <-  c(arima.sim(model=list(ma=theta),n=n/2,sd=1),
arima.sim(model=list(ar=phi),n=n/2,sd=1))
X[i,] <-x
arm=auto.arima(x)
l.phi[i]=length(arm$model$phi)
l.theta[i]=length(arm$model$theta)
}
l.phi
l.theta
i=1
order.p=max(l.phi)
order.theta(max(l.theta))
order.theta=max(l.theta)
fita=arima(X[i,], order=c(length(phi),0,length(theta))),
}
order.q=max(l.theta)
fita=arima(X[i,], order=c(order.p,0,order.q))
fita$coef
fita=arima(X[i,], order=c(order.p,0,order.q),include.mean = FALSE)
fita$coef
fita$var.coef
det(fita$var.coef)
order.p=max(l.phi)
order.q=max(l.theta)
fit.ar=matrix(0,ncol=(order.p+order.q),nrow=I)
fit.ar.var=list()
for(i in I){
fita=arima(X[i,], order=c(order.p,0,order.q),include.mean = FALSE)
fit.ar[i,] <- fita$coef
fit.ar.var[[i]] <- fita$var.coef
}
fit.ar
fit.ar=matrix(0,ncol=(order.p+order.q),nrow=I)
fit.ar.var=list()
for(i in 1:I){
fita=arima(X[i,], order=c(order.p,0,order.q),include.mean = FALSE)
fit.ar[i,] <- fita$coef
fit.ar.var[[i]] <- fita$var.coef
}
fit.ar
coef.mean = apply(fit.ar,2,mean)
coef.mean
#coef.cov = Reduce('+',fit.ar.var)/IC
coef.cov = cov(fit.ar)
coef.cov
det(coef.cov)
solve(coef.cov)
Inew=100
phi=0.8;phi.new=0.5
theta=0.1;tetha.new=theta
I=10
Inew=100
fit.ar.new=matrix(0,ncol=(order.p+order.q),nrow=I)
for(i in 1:Inew){
xnew <-  c(arima.sim(model=list(ma=theta.new),n=n/2,sd=1),
arima.sim(model=list(ar=phi.new),n=n/2,sd=1))
#Xnew<-x
fita=arima(xnew, order=c(order.p,0,order.q),include.mean = FALSE)
fit.ar.new[i,] <- fita$coef
}
theta=0.1;theta.new=theta
fit.ar.new=matrix(0,ncol=(order.p+order.q),nrow=I)
for(i in 1:Inew){
xnew <-  c(arima.sim(model=list(ma=theta.new),n=n/2,sd=1),
arima.sim(model=list(ar=phi.new),n=n/2,sd=1))
#Xnew<-x
fita=arima(xnew, order=c(order.p,0,order.q),include.mean = FALSE)
fit.ar.new[i,] <- fita$coef
}
fit.ar.new
fit.ar.new=matrix(0,ncol=(order.p+order.q),nrow=Inew)
for(i in 1:Inew){
xnew <-  c(arima.sim(model=list(ma=theta.new),n=n/2,sd=1),
arima.sim(model=list(ar=phi.new),n=n/2,sd=1))
#Xnew<-x
fita=arima(xnew, order=c(order.p,0,order.q),include.mean = FALSE)
fit.ar.new[i,] <- fita$coef
}
fit.ar.new
myPaths <- c("C:/Users/Marcio/R lib")
.libPaths(myPaths)  # add new path
library(uclust)
x = matrix(rnorm(100000),nrow=50)  #creating homogeneous Gaussian dataset
res = uhclust(data=x)
x[1:30,] = x[1:30,]+0.7   #Heterogeneous dataset
x[1:10,] = x[1:10,]+0.4
res = uhclust(data=x)
res$groups
detach("package:uclust", unload = TRUE)
library(uclust)
library(sigclust2)
myPaths <- c("C:/Users/Marcio/R lib")
.libPaths(myPaths)  # add new path
setwd("C:/Users/Marcio/Dropbox/Renan Mestrado/Code/Simulation/Tabs 3-4")
library(forecast)
source("v_chart_funs.R")
source("fun_hetroc_sim.R")
#### default for "fun_hetroc_sim.R"
# n=1000,I=20,Inew=500,sigt0=1,sigt.new=10,LagMax=200
# confidence.level=0.95,phi=0.4,phi.new=0.4,print.all=FALSE
Rep=2
Iv <- c(20)
nv <- c(500)
Inew <- 300
phi=0.1;phi.new=0.1
sigt0=1;sigt.new=1 #factor of variance
# t=1:n fator_t.new=(sigt.new/n)*t
perc_T2 <- matrix(0,ncol=length(Iv),nrow=length(nv))
colnames(perc_T2) <- Iv
rownames(perc_T2) <- nv
perc_Va <- perc_T2;  perc_Vd <- perc_T2
perc_Va_sd <- perc_T2;  perc_Vd_sd <- perc_T2
perc_T2_sd <- perc_T2
ARL_T2<-perc_T2
ARL_Va <- perc_T2;  ARL_Vd <- ARL_T2
ARL_Va_sd <- ARL_T2;  ARL_Vd_sd <- ARL_T2
ARL_T2_sd <- ARL_T2
for(i in 1:length(nv)){
n <- nv[i]
for (j in 1:length(Iv)) {
I <- Iv[j]
p_T2 <- c();  p_Va <- c();  p_Vd <- c()
A_T2<-c(); A_Va<-c(); A_Vd<-c()
for(r in 1:Rep){
res <- sim_fun_heterok(n=n,I=I,Inew=Inew,phi=phi,phi.new=phi.new,sigt0=sigt0,sigt.new=sigt.new)
p_T2[r] <- res$percent_T2
p_Va[r] <- res$percent_Va
p_Vd[r] <- res$percent_Vd
A_T2[r]<-ifelse(res$percent_T2==0,NA, 1/res$percent_T2)
A_Va[r]<-ifelse(res$percent_Va==0,NA, 1/res$percent_Va)
A_Vd[r]<-ifelse(res$percent_Vd==0,NA, 1/res$percent_Vd)
}
perc_T2[i,j] <- mean(p_T2)
perc_T2_sd[i,j] <- sd(p_T2)
perc_Va[i,j] <- mean(p_Va)
perc_Va_sd[i,j] <- sd(p_Va)
perc_Vd[i,j] <- mean(p_Vd)
perc_Vd_sd[i,j] <- sd(p_Vd)
ARL_T2[i,j] <- mean(A_T2, na.rm=T)
ARL_T2_sd[i,j] <- sd(A_T2, na.rm=T)
ARL_Va[i,j] <- mean(A_Va, na.rm=T)
ARL_Va_sd[i,j] <- sd(A_Va, na.rm=T)
ARL_Vd[i,j] <- mean(A_Vd, na.rm=T)
ARL_Vd_sd[i,j] <- sd(A_Vd, na.rm=T)
#save.image(file = "sigt_1_phi_01.RData")
}
}
source("v_chart_funs.R")
source("fun_hetroc_sim.R")
source("fun_heteroc_sim.R")
#### default for "fun_hetroc_sim.R"
# n=1000,I=20,Inew=500,sigt0=1,sigt.new=10,LagMax=200
# confidence.level=0.95,phi=0.4,phi.new=0.4,print.all=FALSE
Rep=2
Iv <- c(20)
nv <- c(500)
Inew <- 300
phi=0.1;phi.new=0.1
sigt0=1;sigt.new=1 #factor of variance
# t=1:n fator_t.new=(sigt.new/n)*t
perc_T2 <- matrix(0,ncol=length(Iv),nrow=length(nv))
colnames(perc_T2) <- Iv
rownames(perc_T2) <- nv
perc_Va <- perc_T2;  perc_Vd <- perc_T2
perc_Va_sd <- perc_T2;  perc_Vd_sd <- perc_T2
perc_T2_sd <- perc_T2
ARL_T2<-perc_T2
ARL_Va <- perc_T2;  ARL_Vd <- ARL_T2
ARL_Va_sd <- ARL_T2;  ARL_Vd_sd <- ARL_T2
ARL_T2_sd <- ARL_T2
for(i in 1:length(nv)){
n <- nv[i]
for (j in 1:length(Iv)) {
I <- Iv[j]
p_T2 <- c();  p_Va <- c();  p_Vd <- c()
A_T2<-c(); A_Va<-c(); A_Vd<-c()
for(r in 1:Rep){
res <- sim_fun_heterok(n=n,I=I,Inew=Inew,phi=phi,phi.new=phi.new,sigt0=sigt0,sigt.new=sigt.new)
p_T2[r] <- res$percent_T2
p_Va[r] <- res$percent_Va
p_Vd[r] <- res$percent_Vd
A_T2[r]<-ifelse(res$percent_T2==0,NA, 1/res$percent_T2)
A_Va[r]<-ifelse(res$percent_Va==0,NA, 1/res$percent_Va)
A_Vd[r]<-ifelse(res$percent_Vd==0,NA, 1/res$percent_Vd)
}
perc_T2[i,j] <- mean(p_T2)
perc_T2_sd[i,j] <- sd(p_T2)
perc_Va[i,j] <- mean(p_Va)
perc_Va_sd[i,j] <- sd(p_Va)
perc_Vd[i,j] <- mean(p_Vd)
perc_Vd_sd[i,j] <- sd(p_Vd)
ARL_T2[i,j] <- mean(A_T2, na.rm=T)
ARL_T2_sd[i,j] <- sd(A_T2, na.rm=T)
ARL_Va[i,j] <- mean(A_Va, na.rm=T)
ARL_Va_sd[i,j] <- sd(A_Va, na.rm=T)
ARL_Vd[i,j] <- mean(A_Vd, na.rm=T)
ARL_Vd_sd[i,j] <- sd(A_Vd, na.rm=T)
#save.image(file = "sigt_1_phi_01.RData")
}
}
ARL_Vd
ARL_T2
ARL_Va
ARL_T2
